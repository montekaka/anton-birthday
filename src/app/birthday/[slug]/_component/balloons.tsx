'use client'

import { useEffect, useState } from 'react'

interface Balloon {
  id: number
  x: number
  y: number
  size: number
  color: string
  name: string
  speed: number
  wobble: number
}

const BalloonSVG = ({ color }: { color: string }) => (
  <svg width="62" height="93" viewBox="0 0 124 186" fill={color} xmlns="http://www.w3.org/2000/svg">
    <path d="M113.083 31.851C94.9125 1.76099 60.5725 -8.08903 32.1825 8.64097C9.86252 21.791 -3.34748 52.111 1.36252 79.321C7.04252 112.171 30.5425 137.071 63.6225 137.151C62.7925 139.401 61.7125 141.961 60.4625 144.171C59.1325 146.501 61.7425 148.351 65.1725 149.301C65.4825 152.891 66.8525 171.591 62.6125 184.581L65.3025 185.461C69.5025 172.591 68.4825 155.041 68.0625 149.871C69.4425 150.041 70.8225 150.061 72.0425 149.921C73.6025 149.741 71.3125 142.911 70.4525 141.521C69.4325 139.871 68.5825 138.391 67.9925 137.061C69.5225 137.011 71.2725 136.951 72.0025 136.941C81.8725 136.841 90.6025 133.291 98.2225 126.851C125.133 104.091 131.583 62.541 113.063 31.871L113.083 31.851Z" />
  </svg>
)

const Balloon2SVG = ({ color }: { color: string }) => (
  <svg width="129" height="203" viewBox="0 0 129 203" fill={color} xmlns="http://www.w3.org/2000/svg">
    <path d="M75.4025 153.271C72.5225 148.861 67.6925 140.741 69.5625 138.511H66.9725C66.9725 138.511 64.8926 145.781 61.7726 150.981C60.4026 153.271 63.0725 155.081 66.6225 156.031C66.4525 160.351 65.7526 181.641 67.5426 202.141L70.3626 201.891C68.6426 182.171 69.2525 161.681 69.4425 156.571C70.9525 156.761 72.4825 156.791 73.8125 156.641C75.4325 156.461 76.2726 154.641 75.3826 153.271H75.4025Z" fill="#4C4039"/>
    <path d="M67.8025 143.981C32.5225 144.771 7.40252 118.271 1.40252 83.121C-3.48748 54.481 10.2425 22.581 33.4325 8.74099C62.9325 -8.86901 98.6225 1.501 117.503 33.171C136.753 65.451 130.043 109.181 102.083 133.131C94.1625 139.921 85.0925 143.651 74.8325 143.751C73.3325 143.771 67.8025 143.981 67.8025 143.981Z" fill="#4C4039"/>
    <path d="M15.0125 33.461C12.5525 33.461 10.3425 34.541 8.82254 36.241C8.10254 37.671 7.42254 39.121 6.79254 40.601C6.74254 40.981 6.70255 41.371 6.70255 41.771C6.70255 46.361 10.4225 50.081 15.0125 50.081C18.1325 50.081 22.2825 46.361 22.2825 41.771C22.2825 37.181 19.6025 33.461 15.0125 33.461Z" fill="#E7B653"/>
    <path d="M49.3125 20.991C49.3125 25.581 45.5925 27.231 41.0025 27.231C36.4125 27.231 32.6925 25.591 32.6925 20.991C32.6925 16.391 36.4125 12.681 41.0025 12.681C45.5925 12.681 49.3125 16.401 49.3125 20.991Z" fill="#E7B653"/>
    <path d="M59.0226 47.651C55.7726 44.401 55.1625 39.751 58.6325 36.281C62.1025 32.811 67.5325 32.641 70.7825 35.891C74.0325 39.141 73.8526 44.581 70.3926 48.041C66.9326 51.501 62.2726 50.891 59.0226 47.651Z" fill="#E7B653"/>
    <path d="M98.1525 64.641C98.1525 69.231 95.2925 72.951 90.3925 72.951C85.4925 72.951 81.5226 69.231 81.5226 64.641C81.5226 60.051 85.4925 56.331 90.3925 56.331C95.2925 56.331 98.1525 60.051 98.1525 64.641Z" fill="#E7B653"/>
    <path d="M73.2125 88.021C73.2125 92.901 70.5325 96.851 65.9425 96.851C61.3525 96.851 57.6325 92.901 57.6325 88.021C57.6325 83.141 61.3525 79.191 65.9425 79.191C70.5325 79.191 73.2125 83.141 73.2125 88.021Z" fill="#E7B653"/>
    <path d="M48.2726 111.411C48.2726 116.001 45.5925 119.721 41.0025 119.721C36.4125 119.721 32.6925 116.001 32.6925 111.411C32.6925 106.821 36.4125 103.101 41.0025 103.101C45.5925 103.101 48.2726 106.821 48.2726 111.411Z" fill="#E7B653"/>
    <path d="M44.9125 140.311C44.1625 136.831 41.6825 134.271 37.8825 134.271C36.5525 134.271 35.3025 134.591 34.1825 135.141C37.5525 137.201 41.1325 138.931 44.9125 140.301V140.311Z" fill="#E7B653"/>
    <path d="M73.2125 129.591C73.2125 133.321 70.7125 136.351 66.4225 136.351C62.1325 136.351 58.6625 133.331 58.6625 129.591C58.6625 125.851 62.1325 122.831 66.4225 122.831C70.7125 122.831 73.2125 125.851 73.2125 129.591Z" fill="#E7B653"/>
    <path d="M97.1125 110.891C97.1125 115.191 94.4325 118.681 89.8425 118.681C85.2525 118.681 81.5325 115.191 81.5325 110.891C81.5325 106.591 85.2525 103.101 89.8425 103.101C94.4325 103.101 97.1125 106.591 97.1125 110.891Z" fill="#E7B653"/>
    <path d="M122.063 86.981C122.063 91.281 119.203 94.771 114.303 94.771C109.403 94.771 105.433 91.281 105.433 86.981C105.433 82.681 109.403 79.191 114.303 79.191C119.203 79.191 122.063 82.681 122.063 86.981Z" fill="#E7B653"/>
    <path d="M97.1125 20.991C97.1125 25.011 94.4325 28.261 89.8425 28.261C85.2525 28.261 81.5325 25.001 81.5325 20.991C81.5325 16.981 85.2525 13.721 89.8425 13.721C94.4325 13.721 97.1125 16.981 97.1125 20.991Z" fill="#E7B653"/>
    <path d="M115.823 48.011C119.573 48.011 122.043 46.911 122.833 44.011C121.433 40.491 119.773 37.051 117.833 33.731C117.213 33.561 116.543 33.461 115.833 33.461C111.243 33.461 107.523 37.181 107.523 41.771C107.523 46.361 111.243 48.011 115.833 48.011H115.823Z" fill="#E7B653"/>
    <path d="M48.2726 63.601C48.2726 68.191 44.5525 73.991 39.9625 73.991C35.3725 73.991 30.6125 68.191 30.6125 63.601C30.6125 59.011 35.3725 55.291 39.9625 55.291C44.5525 55.291 48.2726 59.011 48.2726 63.601Z" fill="#E7B653"/>
    <path d="M21.2525 87.501C21.2525 91.521 18.5725 94.771 13.9825 94.771C9.39254 94.771 5.67255 91.511 5.67255 87.501C5.67255 83.491 9.39254 80.231 13.9825 80.231C18.5725 80.231 21.2525 83.491 21.2525 87.501Z" fill="#E7B653"/>
  </svg>
)

const CakeSVG = () => (
  <svg width="111" height="135" viewBox="0 0 111 135" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M2.35248 95.651L93.4625 75.5009L20.4225 0.500946L2.35248 95.651Z" fill="#E7B653"/>
    <path d="M21.8824 21.101C24.1824 20.961 26.3324 22.361 27.1124 24.431C27.9124 26.571 27.2524 28.781 25.3824 30.241C22.9924 32.111 19.9524 31.961 18.0624 29.841C16.7224 28.331 16.2924 26.591 16.9924 24.671C17.7124 22.711 19.1624 21.571 21.1824 21.171C21.4424 21.121 21.7124 21.111 21.8724 21.091L21.8824 21.101Z" fill="#EFE3C2"/>
    <path d="M40.8824 28.101C43.1824 27.961 45.3324 29.361 46.1124 31.431C46.9124 33.571 46.2524 35.781 44.3824 37.241C41.9924 39.111 38.9524 38.961 37.0624 36.841C35.7224 35.331 35.2924 33.591 35.9924 31.671C36.7124 29.711 38.1624 28.571 40.1824 28.171C40.4424 28.121 40.7124 28.111 40.8724 28.091L40.8824 28.101Z" fill="#EFE3C2"/>
    <path d="M61.8824 43.101C64.1824 42.961 66.3324 44.361 67.1124 46.431C67.9124 48.571 67.2524 50.781 65.3824 52.241C62.9924 54.111 59.9524 53.961 58.0624 51.841C56.7224 50.331 56.2924 48.591 56.9924 46.671C57.7124 44.711 59.1624 43.571 61.1824 43.171C61.4424 43.121 61.7124 43.111 61.8724 43.091L61.8824 43.101Z" fill="#EFE3C2"/>
    <path d="M71.8824 65.101C74.1824 64.961 76.3324 66.361 77.1124 68.431C77.9124 70.571 77.2524 72.781 75.3824 74.241C72.9924 76.111 69.9524 75.961 68.0624 73.841C66.7224 72.331 66.2924 70.591 66.9924 68.671C67.7124 66.711 69.1624 65.571 71.1824 65.171C71.4424 65.121 71.7124 65.111 71.8724 65.091L71.8824 65.101Z" fill="#EFE3C2"/>
    <path d="M48.6325 65.051C51.2525 64.891 53.7025 66.481 54.5725 68.841C55.4825 71.281 54.7324 73.781 52.6124 75.451C49.8924 77.581 46.4424 77.401 44.2924 75.001C42.7624 73.291 42.2825 71.301 43.0825 69.121C43.9025 66.891 45.5524 65.601 47.8524 65.141C48.1524 65.081 48.4625 65.071 48.6425 65.051H48.6325Z" fill="#EFE3C2"/>
    <path d="M25.7625 75.001C27.9425 74.871 29.9725 76.191 30.7025 78.151C31.4525 80.171 30.8425 82.261 29.0725 83.641C26.8125 85.411 23.9425 85.261 22.1625 83.261C20.8925 81.841 20.4925 80.191 21.1525 78.381C21.8325 76.531 23.2025 75.451 25.1125 75.081C25.3625 75.031 25.6125 75.021 25.7625 75.011V75.001Z" fill="#EFE3C2"/>
    <path d="M25.7625 48.001C27.9425 47.871 29.9725 49.191 30.7025 51.151C31.4525 53.171 30.8425 55.261 29.0725 56.641C26.8125 58.411 23.9425 58.261 22.1625 56.261C20.8925 54.841 20.4925 53.191 21.1525 51.381C21.8325 49.531 23.2025 48.451 25.1125 48.081C25.3625 48.031 25.6125 48.021 25.7625 48.011V48.001Z" fill="#EFE3C2"/>
    <path d="M8.0625 85.641C9.8325 84.261 10.4425 82.171 9.6925 80.151C9.0925 78.541 7.6025 77.371 5.8725 77.081L4.02252 86.801C5.36252 86.991 6.80249 86.621 8.05249 85.641H8.0625Z" fill="#EFE3C2"/>
    <path d="M8.50256 66.921C10.0026 68.601 12.4226 68.731 14.3226 67.241C15.8126 66.081 16.3326 64.321 15.6926 62.611C15.0826 60.961 13.3626 59.851 11.5326 59.961C11.4026 59.971 11.1925 59.981 10.9825 60.021C10.1825 60.181 9.49256 60.4809 8.93256 60.9409L7.94257 66.161C8.10257 66.421 8.28255 66.671 8.49255 66.921H8.50256Z" fill="#EFE3C2"/>
    <path d="M14.3325 45.241C15.8225 44.081 16.3425 42.321 15.7025 40.611C15.2925 39.501 14.3725 38.641 13.2525 38.231L11.7325 46.2509C12.6225 46.2009 13.5225 45.871 14.3225 45.241H14.3325Z" fill="#EFE3C2"/>
    <path d="M1.64258 97.041L0.462585 106.501L99.7626 84.871L94.2626 75.541L1.64258 97.041Z" fill="#4C4039"/>
    <path d="M4.03253 120.551V134.381L110.073 112.871L99.7625 99.0009L4.03253 120.551Z" fill="#4CABA2"/>
  </svg>
)

const Decoration = ({ color, name }: { color: string, name: string }) => {
  if(name === "BalloonSVG") {
    return <BalloonSVG color={color}/>
  } else if(name === "Balloon2SVG") {
    return <Balloon2SVG color={color}/>
  } else if (name === "CakeSVG") {
    return <CakeSVG/>
  } else {
    return <div className={`rounded-full bg-[${color}] w-12 h-12`}></div>
  }
}

export default function Balloons() {
  const [balloons, setBalloons] = useState<Balloon[]>([])

  useEffect(() => {
    const colors = ['#14B8A6', '#F87171', '#44403C', '#14B8A6']
    const names = ["BalloonSVG", "Balloon2SVG", "CakeSVG", ""];
    const newBalloons: Balloon[] = Array.from({ length: 10 }, (_, i) => ({
      id: i,
      x: Math.random() * 100,
      y: Math.random() * 100,
      size: Math.random() * 2 + 50,
      color: colors[Math.floor(Math.random() * colors.length)],
      name: names[Math.floor(Math.random() * names.length)],
      speed: Math.random() * 0.3 + 0.1,
      wobble: Math.random() * 2 - 1,
    }))
    setBalloons(newBalloons)

    const interval = setInterval(() => {
      setBalloons(prev => prev.map(balloon => ({
        ...balloon,
        y: balloon.y <= -20 ? 120 : balloon.y - balloon.speed,
        x: balloon.x + Math.sin(balloon.y * 0.05) * balloon.wobble
      })))
    }, 50)

    return () => clearInterval(interval)
  }, [])

  return (
    <div className="fixed inset-0 pointer-events-none overflow-hidden">
      {balloons.map(balloon => (
        <div
          key={balloon.id}
          className="absolute"
          style={{
            left: `${balloon.x}%`,
            top: `${balloon.y}%`,
            transform: `scale(${balloon.size / 100})`,
            transition: 'all 0.05s linear'
          }}
        >
          <div className="relative" style={{ color: balloon.color }}>
            <Decoration color={balloon.color} name={balloon.name}/>
          </div>
        </div>
      ))}
    </div>
  )
}
